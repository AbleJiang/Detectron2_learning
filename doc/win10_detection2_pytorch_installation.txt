

1. 已经安装好的软件
1) VS2019
2) Anaconda3, conda 4.8.3, Python 3.7.6
3) CUDA 10.1 相关软件已经安装好， 本次实验采用的是GTX1080 8G显卡

2. 创建 detectron2 环境
conda create --name detectron2 python=3.7
conda info --env
conda --version

conda activate detectron2

conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --set show_channel_urls yes
# for legacy win-64
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/peterjc123/


3. 安装 pytorch
conda install pytorch torchvision cudatoolkit=10.1 -c pytorch

pip install torch===1.4.0 torchvision===0.5.0 -f https://download.pytorch.org/whl/torch_stable.html

安装 matplotlib
python -m pip install -U pip setuptools
python -m pip install matplotlib


# GPU检测
conda activate detectron2
python 
然后在python解释器中输入下面的代码
from __future__ import print_function
import torch

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device)

测试成功的话，会输出如下的信息：
(detectron2) D:\>python
Python 3.7.7 (default, Mar 23 2020, 23:19:08) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from __future__ import print_function
>>> import torch
>>> device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
>>> print(device)
cuda
>>>                


4. 为detectron2设置环境变量

获取VS2019的版本信息, 如下面的目录。 对应的版本是14.25, -vcvars_ver 这个参数需要用到这个版本信息。
D:\VS2019\Enterprise\VC\Tools\MSVC\14.25.28610

1）detectron2需要vs2019最新的编译器
2）如果之前电脑上已经装了vs的其他版本，重新设置vs2019的编译器，操作如下：
SET MSSdk=1
SET DISTUTILS_USE_SDK=1
call "D:/VS2019/Enterprise/VC/Auxiliary/Build/vcvarsall.bat" amd64 -vcvars_ver=14.25
每个人的vcvarsall.bat路径不一样，找到自己的路径，然后替换掉上面的。

5.安装cocoapi社区版：
下载以下链接的cocoapi，因为cocoapi官方暂不支持Windows
https://github.com/philferriere/cocoapi
下载得到cocoapi-master.zip, 文件大小大概1.5M
将 文件展开到d:    得到 D:\cocoapi-master
然后用以下指令安装
安装Cython
# python3.7 -m pip install cython
pip install Cython

d:
cd D:\cocoapi-master\PythonAPI
python setup.py build_ext --inplace
python setup.py build_ext install


6.下载fvcore
下载链接：https://github.com/facebookresearch/fvcore

得到 fvcore-master.zip 文件，然后展开到d:
然后cd到setup.py所在目录，用以下指令安装
d:
cd D:\fvcore-master
python setup.py build --force develop

7.编译detectron2
下载链接 https://github.com/conansherry/detectron2
得到detectron2-master.zip， 展开到d:

cd 到detectron2目录，找到setup.py文件，然后用以下指令编译：
d:
cd D:\detectron2-master
python setup.py build --force develop

python setup.py build develop


8. 安装相关的python包
1) 使用下面的命令安装 cv2
pip install opencv-python
2) 使用下面的命令安装 win32con
pip install pywin32


千万不要安装 pypiwin32, 否则找不到win32con的包。如果不小心安装了， 先删除两个包，然后再单独安装pywin32

pip install pypiwin32
pip list 


python -m pip install pypiwin32

https://github.com/mhammond/pywin32/
https://github.com/mhammond/pywin32/releases



9. 测试代码
conda activate detectron2

import numpy as np
import cv2
#from matplotlib import pyplot
import matplotlib.pyplot as plt

import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog


# 下载测试图片:
# wget http://images.cocodataset.org/val2017/000000439715.jpg -O input.jpg
im = cv2.imread("d:/tmp/input.jpg")
plt.figure()
plt.imshow(im[:, :, ::-1])
plt.show()

#
cfg = get_cfg()
cfg.merge_from_file("./detectron2_repo/configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  #模型阈值
cfg.MODEL.WEIGHTS = "detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl"
predictor = DefaultPredictor(cfg)
outputs = predictor(im)

#
pred_classes = outputs["instances"].pred_classes
pred_boxes = outputs["instances"].pred_boxes

#在原图上画出检测结果
v = Visualizer(im[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2)
v = v.draw_instance_predictions(outputs["instances"].to("cpu"))
plt.figure(2)
plt.imshow(v.get_image()[:, :, ::-1])
plt.show()

